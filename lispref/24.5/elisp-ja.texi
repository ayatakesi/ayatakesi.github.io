\input texinfo  @c -*-texinfo-*-
@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c %**start of header
@setfilename elisp

@ifset VOL1
@set volflag
@set voltitle Volume 1
@end ifset

@ifset VOL2
@set volflag
@set voltitle Volume 2
@end ifset

@ifset volflag
@settitle GNU Emacs Lisp Reference Manual: @value{voltitle}
@end ifset
@ifclear volflag
@settitle GNU Emacs Lisp Reference Manual
@end ifclear

@c %**end of header

@c See two-volume-cross-refs.txt.
@tex
@ifset VOL1
\message{Formatting for two volume edition...Volume 1...}
%
% Read special toc file, set up in two-volume.make.
\gdef\tocreadfilename{elisp1-toc-ready.toc}
%
% Don't make outlines, they're not needed and \readdatafile can't pay
% attention to the special definition above.
\global\let\pdfmakeoutlines=\relax
%
% Start volume 1 chapter numbering at 1; this must be listed as chapno0.
\global\chapno=0
@end ifset
@ifset VOL2
\message{Formatting for two volume edition...Volume 2...}
%
% Read special toc file, set up in two-volume.make.
\gdef\tocreadfilename{elisp2-toc-ready.toc}
%
% Don't make outlines, they're not needed and \readdatafile can't pay
% attention to the special definition above.
\global\let\pdfmakeoutlines=\relax
%
% Start volume 2 chapter numbering at 27; this must be listed as chapno26
\global\chapno=26
@end ifset
@end tex


@c Version of the manual and of Emacs.
@c (See comments for EDITION in emacs.texi)
@set VERSION  3.1
@include emacsver.texi
@set DATE October 2014

@c in general, keep the following line commented out, unless doing a
@c copy of this manual that will be published.  The manual should go
@c onto the distribution in the full, 8.5 x 11" size.
@c @set smallbook

@ifset volflag
@smallbook
@end ifset

@ifset smallbook
@smallbook
@end ifset

@c per rms and peterb, use 10pt fonts for the main text, mostly to
@c save on paper cost.
@c Do this inside @tex for now, so current makeinfo does not complain.
@tex
@ifset smallbook
@fonttextsize 10
@end ifset
\global\hbadness=6666 % don't worry about not-too-underfull boxes
@end tex

@c Combine indices.
@synindex cp fn
@syncodeindex vr fn
@syncodeindex ky fn
@syncodeindex pg fn
@c We use the "type index" to index new functions and variables.
@c @syncodeindex tp fn

@copying
@iftex
This is edition @value{VERSION} of the @cite{GNU Emacs Lisp Reference
Manual},@*
@end iftex
@ifnottex
This is the @cite{GNU Emacs Lisp Reference Manual}
@end ifnottex
corresponding to Emacs version @value{EMACSVER}.

Copyright @copyright{} 1990--1996, 1998--2015 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with the Invariant
Sections being ``GNU General Public License,'' with the Front-Cover Texts
being ``A GNU Manual,'' and with the Back-Cover Texts as in (a) below.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and modify
this GNU manual.  Buying copies from the FSF supports it in developing GNU
and promoting software freedom.''
@end quotation
@end copying

@documentencoding UTF-8

@dircategory Emacs lisp
@direntry
* Elisp: (elisp).            The Emacs Lisp Reference Manual.
@end direntry

@titlepage
@title GNU Emacs Lisp Reference Manual
@ifset volflag
@subtitle @value{voltitle}
@end ifset
@subtitle For Emacs Version @value{EMACSVER}
@subtitle Revision @value{VERSION}, @value{DATE}

@author by Bil Lewis, Dan LaLiberte, Richard Stallman,
@author the GNU Manual Group, et al.
@page
@vskip 0pt plus 1filll
@insertcopying

@sp 2
Published by the Free Software Foundation @* 51 Franklin St, Fifth Floor @*
Boston, MA 02110-1301 @* USA @* ISBN 1-882114-74-4

@sp 2
Cover art by Etienne Suvasa.
@end titlepage


@c Print the tables of contents
@summarycontents
@contents


@ifnottex
@node Top
@top Emacs Lisp

@ifset WWW_GNU_ORG
@html <p>The homepage for GNU Emacs is at <a
href="/software/emacs/">http://www.gnu.org/software/emacs/</a>.<br> For
information on using Emacs, refer to the <a
href="/software/emacs/manual/emacs.html">Emacs Manual</a>.<br> To view this
manual in other formats, click <a
href="/software/emacs/manual/elisp.html">here</a>.
@end html
@end ifset

@insertcopying
@end ifnottex

@menu
* Introduction::             イントロダクションと使用される慣習。

* Lisp Data Types::          Emacs 
                               Lispでのオブジェクトのデータタイプ。
* Numbers::                  数値と算術関数。
* Strings and Characters::   文字列とそれらを処理する関数。
* Lists::                    リスト、コンスセルと関連する関数。
* Sequences Arrays Vectors::  リスト、文字列、ベクターはシーケンスと呼ばれる。特定の関数は任意の種類のシーケンスに機能する。ここではベクターの説明も行う。
* Hash Tables::              非常に高速な照会テーブル。
* Symbols::                  名前を一意に表すシンボル。

* Evaluation::               Lisp式が評価される方法。
* Control Structures::       条件文、ループ、非ローカル脱出。
* Variables::                プログラムで値を表すためにシンボルを使用する。
* Functions::                関数とは別の関数から呼び出せるLispプログラムである。
* Macros::                   マクロとはLisp言語を拡張する手段である。
* Customization::            変数やフェイスをカスタマイズ可能にする。

* Loading::                  LispコードのファイルをLispに読み込む。
* Byte Compilation::         プログラム実行を高速にするコンパイル。
* Debugging::                Lispプログラムのデバッグのためのツールとヒント。

* Read and Print::           Lispオブジェクトからテキストへの変換と逆変換。
* Minibuffers::              入力を読み取るためにミニバッファーを使用する。
* Command Loop::             エディターコマンドループが機能する方法と、そのサブルーチンを呼び出す方法。
* Keymaps::                  キーをコマンドにバインドするための定義。
* Modes::                    メジャーモードとマイナーモードの定義。
* Documentation::            ドキュメント文字列の記述と使用。

* Files::                    ファイルへのアクセス。
* Backups and Auto-Saving::  バックアップファイルト自動保存ファイルの作成方法の制御。
* Buffers::                  バッファーオブジェクトの作成と使用。
* Windows::                  ウィンドウの操作とバッファーの表示。
* Frames::                   システムレベルウィンドウを複数作成する。
* Positions::                バッファー位置と移動関数。
* Markers::                  マーカーは位置を表し、テキスト変更時に自動的に更新される。

* Text::                     バッファー内のテキストの調査と変更。
* Non-ASCII Characters::     バッファーと文字列内の非ASCIIテキスト。
* Searching and Matching::   バッファー内の文字列や正規表現の検索。
* Syntax Tables::            単語やリストの解析を制御する構文テーブル。
* Abbrevs::                  Abbrevモードが機能する方法と、そのデータ構造。

* Processes::                サブプロセスの実行と対話。
* Display::                  スクリーン表示を制御するための機能。
* System Interface::         ユーザーID、システムタイプ、環境変数、その他類似項目の取得。

* Packaging::                配布用にLispコードを準備する。

Appendices



* Antinews::                 Emacs 
                               23にダウングレードするユーザーのための情報。
* GNU Free Documentation License::  このドキュメントのライセンス。
* GPL::                      GNU 
                               Emacsの複製と変更を行うための条件。
* Tips::                     Emacs 
                               Lispのコーディング規約にたいするアドバイス。
* GNU Emacs Internals::      Emacsのビルドとダンプ、内部的な構造。
* Standard Errors::          いくつかの標準的なエラーシンボルのリスト。
* Standard Keymaps::         いくつかの標準的なキーマップのリスト。
* Standard Hooks::           いくつかの標準的なフック変数のリスト。

* Index::                    概念、関数、変数、その他用語のインデックス。

@ignore
* New Symbols::             New functions and variables in Emacs @value{EMACSVER}.
@end ignore


@c Do NOT modify the following 3 lines!  They must have this form to
@c be correctly identified by `texinfo-multiple-files-update'.  In
@c particular, the detailed menu header line MUST be identical to the
@c value of `texinfo-master-menu-header'.  See texnfo-upd.el.


@detailmenu
 --- 詳細ノードリスト --- ---------------------------------



以下はすでにリストしたもののサブノードであるようなノードのリストです。1ステップで移動できるようにここに記します:



Introduction



* Caveats::                  不備な点と、助けを求める方法。
* Lisp History::             Emacs LispはMaclispの子孫です。
* Conventions::              このマニュアルのフォーマット方法。
* Version Info::             実行中のEmacsのバージョンは?
* Acknowledgments::          このマニュアルの著者、編集者、スポンサー。

Conventions



* Some Terms::               このマニュアルで使用する用語の説明。
* nil and t::                シンボル@code{nil}と@code{t}の使用方法。
* Evaluation Notation::      評価の例で使用するフォーマット。
* Printing Notation::        テキストのプリント例で使用するフォーマット。
* Error Messages::           エラー例で使用するフォーマット。
* Buffer Text Notation::     例のバッファー内容で使用するフォーマット。
* Format of Descriptions::   関数や変数などの説明にたいする表記。

Format of Descriptions



* A Sample Function Description::  架空の関数@code{foo}にたいする記述例。
* A Sample Variable Description::  架空の変数@code{electric-future-map}にたいする記述例。

Lisp Data Types



* Printed Representation::   Lispオブジェクトがテキストとして表現される方法。
* Comments::                 コメントとコメント書式の慣例。
* Programming Types::        すべてのLispシステムに存在する型。
* Editing Types::            Emacs固有の型。
* Circular Objects::         循環構造にたいする入力構文。
* Type Predicates::          型に関連するテスト。
* Equality Predicates::      2つのオブジェクトが等しいかのテスト。

Programming Types



* Integer Type::             小数部のない数字。
* Floating-Point Type::      広い範囲をもつ、小数部をもつ数字。
* Character Type::           文字、数字、コントロール文字にたいする表現。
* Symbol Type::              関数、変数、プロパティーリストを参照する、一意に識別される多目的オブジェクト。
* Sequence Type::            リストと配列はどちらもシーケンスに分類される。
* Cons Cell Type::           コンスセル、および(コンスセルにより作られる)リスト。
* Array Type::               配列には文字列とベクターが含まれる。
* String Type::              (効率的な)文字の配列。
* Vector Type::              1次元の配列。
* Char-Table Type::          文字によりインデックスされる1次元の疎な配列。
* Bool-Vector Type::         @code{t}と@code{nil}からなる、1次元の配列。
* Hash Table Type::          とても高速な参照用のテーブル。
* Function Type::            他の場所から呼び出せる実行可能なコードの断片。
* Macro Type::               より基本的だが少し見栄えの悪い、式を他の式に展開する手法。
* Primitive Function Type::  Lispから呼び出せる、Cで記述された関数。
* Byte-Code Type::           Lispで記述されてからコンパイルされた関数。
* Autoload Type::            頻繁に使用されない関数を自動的にロードするために使用される型。

Character Type



* Basic Char Syntax::        標準的な文字の構文。
* General Escape Syntax::    文字をコードにより指定する方法。
* Ctl-Char Syntax::          コントロール文字の構文。
* Meta-Char Syntax::         メタ文字の構文。
* Other Char Bits::          ハイパー、スーパー、アルト文字の構文。

Cons Cell and List Types



* Box Diagrams::             リストを絵で書いたら。
* Dotted Pair Notation::     コンスセルの一般的な構文。
* Association List Type::    コンスセルの一般的な構文。

String Type



* Syntax for Strings::       Lisp文字列を指定する方法。
* Non-ASCII in Strings::     文字列内の国際化文字。
* Nonprinting Characters::   文字列内の印刷不可能なリテラル文字。
* Text Props and Strings::   テキストプロパティーをともなう文字列。

Editing Types



* Buffer Type::              編集のための基本オブジェクト。
* Marker Type::              バッファー内の位置。
* Window Type::              バッファーはウィンドウ内に表示する。
* Frame Type::               ウィンドウはフレームを細分化する。
* Terminal Type::            フレームを表示する端末デバイス。
* Window Configuration Type::  フレームが細分化された方法を記録する。
* Frame Configuration Type::  すべてのフレームの状態を記録する。
* Process Type::             背後のOS上で実行されるEmacsのサブプロセス。
* Stream Type::              文字の受信と送信。
* Keymap Type::              キーストロークがどの関数を呼び出すか。
* Overlay Type::             オーバーレイが表示される方法。
* Font Type::                テキストを表示するフォント。

Numbers



* Integer Basics::           整数の表現と範囲。
* Float Basics::             浮動少数の表現と範囲。
* Predicates on Numbers::    数にたいするテスト。
* Comparison of Numbers::    同一性と非同一性の述語。
* Numeric Conversions::      浮動小数点数から整数、またはその逆の変換。
* Arithmetic Operations::    加減乗除の方法。
* Rounding Operations::      浮動小数点数の明示的な丸め。
* Bitwise Operations::       論理的なand、or、not、shift。
* Math Functions::           三角関数、指数、対数関数。
* Random Numbers::           予測可能または不可能な乱数の取得。

Strings and Characters



* String Basics::            文字列と文字の基本的なプロパティー。
* Predicates for Strings::   オブジェクトが文字列か文字かをテストする。
* Creating Strings::         新しい文字列を割り当てる関数。
* Modifying Strings::        既存の文字列の内容を変更する。
* Text Comparison::          文字または文字列を比較する。
* String Conversion::        文字から文字列、文字から文字列への変換。
* Formatting Strings::       @code{format}: 
                               @code{printf}’のEmacsバージョン。
* Case Conversion::          case変換関数。
* Case Tables::              case変換のカスタマイズ。

Lists



* Cons Cells::               コンスセルからリストが作られる方法。
* List-related Predicates::  このオブジェクトはリストか? 
                               2つのリストを比較する。
* List Elements::            リストの一部を抽出する。
* Building Lists::           リスト構造の作成。
* List Variables::           変数に保存されたリストにたいする変更。
* Modifying Lists::          既存のリストに新しい要素を保存する。
* Sets And Lists::           リストは有限な数学集合を表現できる。
* Association Lists::        リストは有限な関係またはマッピングを表現できます。
* Property Lists::           要素ペアのリスト。

Modifying Existing List Structure



* Setcar::                   リスト内の要素の置き換え。
* Setcdr::                   リストの根幹部分の置き換え。これは要素の追加や削除に使用される。
* Rearrangement::            リスト内の要素の再配置、リストの合成。

Property Lists



* Plists and Alists::        プロパティーリストと連想リストの利点の比較。
* Plist Access::             他の場所に保管されたプロパティーリストへのアクセス。

Sequences, Arrays, and Vectors



* Sequence Functions::       任意の種類のシーケンスを許す関数。
* Arrays::                   Emacs Lispの配列の特徴。
* Array Functions::          Emacs Lispの配列の特徴。
* Vectors::                  Emacs Lispベクターの特質。
* Vector Functions::         ベクターのための特別な関数。
* Char-Tables::              文字テーブルを扱う方法。
* Bool-Vectors::             ブールベクターを扱う方法。
* Rings::                    オブジェクトの固定サイズのリングを管理する。

Hash Tables



* Creating Hash::            ハッシュテーブルを作成する関数。
* Hash Access::              ハッシュテーブルの内容の読み書き。
* Defining Hash::            新たな比較方法の定義。
* Other Hash::               その他。

Symbols



* Symbol Components::        シンボルは名前、値、関数定義、プロパティーリストをもつ。
* Definitions::              定義は、シンボルが使用される方法を示す。
* Creating Symbols::         シンボルが一意に保たれる方法。
* Symbol Properties::        さまざまな情報を記録するために、各シンボルはプロパティーリストをもつ。

Symbol Properties



* Symbol Plists::            シンボルプロパティーへのアクセス。
* Standard Properties::      シンボルプロパティーの標準的な意味。

Evaluation



* Intro Eval::               事の在り方における評価。
* Forms::                    さまざまなオブジェクト類が評価される方法。
* Quoting::                  (プログラム内に定数を配すための)評価の回避。
* Backquote::                リスト構造の、より簡単な構築。
* Eval::                     Lispインタープリターを明示的に呼び出す方法。

Kinds of Forms



* Self-Evaluating Forms::    自分自身を評価するフォーム。
* Symbol Forms::             変数として評価されるシンボル。
* Classifying Lists::        さまざまな種類のリストフォームを区別する方法。
* Function Indirection::     シンボルがリストのcarにある場合、そのシンボルを通じて実際の関数を見つける。
* Function Forms::           関数を呼び出すフォーム。
* Macro Forms::              マクロを呼び出すフォーム。
* Special Forms::            "スペシャルフォーム"は特別な基本フォームで、それらのほとんどがとても重要である。
* Autoloading::              実際の定義を含むファイルのロードをセットアップする関数。

Control Structures



* Sequencing::               テキスト順の評価。
* Conditionals::             @code{if}、@code{cond}、@code{when}、@code{unless}。
* Combining Conditions::     @code{and}、@code{or}、@code{not}。
* Iteration::                @code{while}ループ。
* Nonlocal Exits::           シーケンスの外へジャンプ。

Nonlocal Exits



* Catch and Throw::          プログラム自身の目的による非ローカル脱出。
* Examples of Catch::        このような非ローカル脱出が記述される方法。
* Errors::                   エラーがシグナル・処理される方法。
* Cleanups::                 エラーが発生した場合のクリーンアップフォーム実行のアレンジ。

Errors



* Signaling Errors::         エラーを報告する方法。
* Processing of Errors::     エラーを報告するときEmacsが何を行なうか。
* Handling Errors::          エラーをトラップして実行を継続する方法。
* Error Symbols::            エラートラッピングのために、エラーをクラス分けする方法。

Variables



* Global Variables::         どの場所でも永続的に存在する変数の値。
* Constant Variables::       変更されることのない値を持つ、ある種の"変数"。
* Local Variables::          一時的にのみ存在する存在する変数の値。
* Void Variables::           値を持たないシンボル。
* Defining Variables::       シンボルが変数として使用されていることを宣言する定義。
* Tips for Defining::        変数を定義するときに考慮すべき事項。
* Accessing Variables::      実行時に判明する名前をもつ変数の値を確認する。
* Setting Variables::        変数に新しい値を格納する。
* Variable Scoping::         Lispがローカル値とグローバル値を選択する方法。
* Buffer-Local Variables::   1つのバッファーないだけで効果をもつ変数の値。
* File Local Variables::     ファイル内にリストされたローカル変数の処理。
* Directory Local Variables::  ディレクトリー内のすべてのファイルで共通のローカル変数。
* Variable Aliases::         他の変数のエイリアスとなる変数。
* Variables with Restricted Values::  任意のLispオブジェクトを値とすることが@emph{できない}、定数ではない変数。
* Generalized Variables::    変数の概念の拡張。

Scoping Rules for Variable Bindings



* Dynamic Binding::          Emacs内でのローカル変数にたいするデフォルトのバインディング。
* Dynamic Binding Tips::     ダイナミックバインディングによる問題を回避する。
* Lexical Binding::          ローカル変数にたいする他の種類のバインディング。
* Using Lexical Binding::    レキシカルバインディングを有効にする方法。

Buffer-Local Variables



* Intro to Buffer-Local::    イントロダクションと概念。
* Creating Buffer-Local::    バッファーローカルなバインディングの作成と削除。
* Default Value::            自身ではバッファーローカルな値をもたないバッファーで参照されるデフォルト値。

Generalized Variables



* Setting Generalized Variables::  @code{setf}マクロ。
* Adding Generalized Variables::  新たな@code{setf}フォームの定義。

Functions



* What Is a Function::       Lisp関数 
                               vs. プリミティブ。専門用語。
* Lambda Expressions::       関数がLispオブジェクトとして表現される方法。
* Function Names::           シンボルは関数を名づける役割を果たすことができる。
* Defining Functions::       関数定義のためのLisp式。
* Calling Functions::        既存の関数を使う方法。
* Mapping Functions::        リストの各要素などに関数を適用する。
* Anonymous Functions::      ラムダ式、それは無名の関数。
* Function Cells::           シンボルの関数定義へのアクセスとセット。
* Closures::                 レキシカル環境に囲まれた関数。
* Obsolete Functions::       関数を陳腐と宣言する。
* Inline Functions::         コンパイラーによりインライン展開される関数。
* Declare Form::             関数についての補足的な情報の追加。
* Declaring Functions::      関数が定義されていることをコンパイラーに知らせる。
* Function Safety::          呼び出しても安全な関数なのか判断する。
* Related Topics::           関数が動作する方法において特別な意味をもつ、特定のLispプリミティブのクロスリファレンス。

Lambda Expressions



* Lambda Components::        ラムダ式のパーツ。
* Simple Lambda::            シンプルな例。
* Argument List::            引数リストの詳細と特別な機能。
* Function Documentation::   関数内にドキュメントを記述する方法。

Macros



* Simple Macro::             基本的な例。
* Expansion::                いつ、なぜ、どのようにしてマクロが展開されるか。
* Compiling Macros::         コンパイラーによりマクロが展開される方法。
* Defining Macros::          マクロ定義を記述する方法。
* Problems with Macros::     マクロ引数を何回も評価しないこと。ユーザーの変数を隠さないこと。
* Indenting Macros::         マクロ呼び出しのインデント方法の指定。

Common Problems Using Macros



* Wrong Time::               マクロ内ではなく展開形で作業を行う。
* Argument Evaluation::      展開形は各マクロ引数を一度評価すること。
* Surprising Local Vars::    展開形でのローカル変数バインディングには特に注意を要する。
* Eval During Expansion::    評価せずに展開形の中に配置すること。
* Repeated Expansion::       展開が行われる回数への依存を避ける。

Customization Settings



* Common Keywords::          すべての種類のカスタマイズ宣言に共通なキーワード引数。
* Group Definitions::        カスタマイズグループ定義の記述。
* Variable Definitions::     ユーザーオプションの宣言。
* Customization Types::      ユーザーオプションの型指定。
* Applying Customizations::  カスタマイズセッティングを適用する関数。
* Custom Themes::            カスタムテーマの記述。

Customization Types



* Simple Types::             シンプルなカスタマイズ型(sexp、integerなど)。
* Composite Types::          他の型やデータから新しい型を構築する。
* Splicing into Lists::      @code{:inline}で要素をリストに結合する。
* Type Keywords::            カスタマイズ型でのキーワード／引数ペアー
* Defining New Types::       型に名前をつける。

Loading



* How Programs Do Loading::  @code{load}’関数、その他。
* Load Suffixes::            @code{load}’が試みられるサフィックスについての詳細。
* Library Search::           ロードするライブラリーの検索。
* Loading Non-ASCII::        Emacs 
                               Lispファイル内の非@acronym{ASCII}文字。
* Autoload::                 オートロードのための関数のセットアップ。
* Repeated Loading::         ファイルを2度ロードする場合の配慮。
* Named Features::           まだロードされていないライブラリーのロード。
* Where Defined::            特定のシンボルがどのファイルで定義されているかの検索。
* Unloading::                ロードされたライブラリーを"unload"する方法。
* Hooks for Loading::        特定のライブラリーがロードされたとき実行されるコードの提供。

Byte Compilation



* Speed of Byte-Code::       バイトコンパイルによるスピードアップ例。
* Compilation Functions::    バイトコンパイル関数。
* Docs and Compilation::     ドキュメント文字列のダイナミックロード。
* Dynamic Loading::          個々の関数のダイナミックロード。
* Eval During Compile::      コンパイル時に評価されるコード。
* Compiler Errors::          コンパイラーのエラーメッセージの扱い。
* Byte-Code Objects::        バイトコンパイル済み関数に使用されるデータ型。
* Disassembly::              バイトコードの逆アセンブル。バイトコードの読み方。

Debugging Lisp Programs



* Debugger::                 Emacs 
                               Lisp評価機能にたいするデバッガ。
* Edebug::                   Emacs Lispソースレベルデバッガ。
* Syntax Errors::            シンタックスエラーを見つける方法。
* Test Coverage::            プログラムのすべての分岐を確実にテストする。
* Profiling::                あなたのコードが使用するリソースの計測。

The Lisp Debugger



* Error Debugging::          エラー発生時にデバッガにエンターする。
* Infinite Loops::           exitしないプログラムの停止デバッグ。
* Function Debugging::       特定の関数が呼び出されたときにデバッガにエンターする。
* Explicit Debug::           プログラム内の特定箇所でデバッガにエンターする。
* Using Debugger::           デバッガが行なうこと: 
                               そこで何を目にするか。
* Debugger Commands::        デバッガで使用するコマンド。
* Invoking the Debugger::    関数@code{debug}の呼び出し方。
* Internals of Debugger::    デバッガのサブルーチン、およびグローバル変数。

Edebug



* Using Edebug::             Edebug使用のための手引き。
* Instrumenting::            Edebugでデバッグするために、コードをインストルメント(計装)しなければならないe
* Edebug Execution Modes::   多かれ少なかれ、ストップする実行モード。
* Jumping::                  特定の位置にジャンプするコマンド。
* Edebug Misc::              さまざまなコマンド。
* Breaks::                   プログラムをストップさせるbreakpointのセット。
* Trapping Errors::          Edebugでのエラーのトラップ。
* Edebug Views::             Edebugの内側と外側のビュー。
* Edebug Eval::              Edebugでの式の評価。
* Eval List::                Edebugにエンターするたびに値が表示される式。
* Printing in Edebug::       プリントのカスタマイズ。
* Trace Buffer::             バッファー内で採れを生成する方法。
* Coverage Testing::         評価をカバレッジテストする方法。
* The Outside Context::      Edebugが保存およびリストアするデータ。
* Edebug and Macros::        マクロ呼び出しをハンドルする方法の指定。
* Edebug Options::           Edebugをカスタマイズするオプション変数。

Breaks



* Breakpoints::              ストップポイントのbreakpoint。
* Global Break Condition::   イベントによるbreak。
* Source Breakpoints::       ソースコードに埋め込まれたbreakpoint。

The Outside Context



* Checking Whether to Stop::何を行うかをEdebugが決定するタイミング。
* Edebug Display Update::    Edebugがディスプレイを更新するタイミング。
* Edebug Recursive Edit::    Edebugが実行をストップするタイミング。

Edebug and Macros



* Instrumenting Macro Calls::基本的な問題点。
* Specification List::       式の複雑なパターンを指定する方法。
* Backtracking::             マッチに失敗したときEdebugが行なうこと。
* Specification Examples::   Edebug仕様を理解するために。

Debugging Invalid Lisp Syntax



* Excess Open::              誤った開カッコと閉カッコを探す方法。
* Excess Close::             誤った閉カッコと開カッコを探す方法。

Reading and Printing Lisp Objects



* Streams Intro::            ストリーム、読み取り、プリントの概観。
* Input Streams::            入力ストリームとして使用できる、さまざまなデータ型。
* Input Functions::          テキストからLispオブジェクトを読み取る関数。
* Output Streams::           出力ストリームとして使用できる、さまざまなデータ型。
* Output Functions::         テキストとしてLispオブジェクトをプリントする関数。
* Output Variables::         プリント関数が何を行うか制御する変数。

Minibuffers



* Intro to Minibuffers::     ミニバッファーに関する基本的な情報。
* Text from Minibuffer::     そのままのテキスト文字列を読み取る方法。
* Object from Minibuffer::   Lispオブジェクトや式を読み取る方法。
* Minibuffer History::       ユーザーが再利用できるように以前のミニバッファー入力は記録される。
* Initial Input::            ミニバッファーにたいして初期内容を指定する。
* Completion::               補完の呼び出しとカスタマイズ方法。
* Yes-or-No Queries::        問いにたいし単純な答えを求める。
* Multiple Queries::         一連の似たような問いに答える。
* Reading a Password::       端末からパスワードを読み取る。
* Minibuffer Commands::      ミニバッファー内でキーバインドとして使用されるコマンド。
* Minibuffer Windows::       特殊なミニバッファーウィンドウを処理する。
* Minibuffer Contents::      どのようなコマンドがミニバッファーのテキストにアクセスするか。
* Recursive Mini::           ミニバッファーへの再帰的なエントリーが許容されるかどうか。
* Minibuffer Misc::          カスタマイズ用のさまざまなフックや変数。

Completion



* Basic Completion::         文字列を補完する低レベル関数。
* Minibuffer Completion::    補完つきでミニバッファーを呼び出す。
* Completion Commands::      補完を行うミニバッファーコマンド。
* High-Level Completion::    特別なケースに有用な補完(バッファー名や変数名などの読み取り)。
* Reading File Names::       ファイル名やシェルコマンドの読み取りに補完を使用する。
* Completion Variables::     補完の挙動を制御する変数。
* Programmed Completion::    独自の補完関数を記述する。
* Completion in Buffers::    通常バッファー内でのテキスト補完。

Command Loop



* Command Overview::         コマンドループがコマンドを読み取る方法。
* Defining Commands::        関数が引数を読み取る方法を指定する。
* Interactive Call::         引数を読み取るようにコマンドを呼び出す。
* Distinguish Interactive::  インタラクティブな呼び出しとコマンドを区別する。
* Command Loop Info::        検証用にコマンドループによりセットされる変数。
* Adjusting Point::          コマンドの後にポイント位置を調整する。
* Input Events::             入力を読み取るとき、入力がどのように見えるか。
* Reading Input::            キーボードやマウスからの入力イベントを読み取る方法。
* Special Events::           即座かつ個別に処理されるイベント。
* Waiting::                  ユーザー入力または経過時間の待機。
* Quitting::                 @kbd{C-g}’が機能する方法。quitをcatchまたは延期する方法。
* Prefix Command Arguments::  コマンドがプレフィクス引数が機能するようにセットするための方法。
* Recursive Editing::        再帰編集へのエンター、なぜ通常は再帰編集を行うべきでないのか。
* Disabling Commands::       コマンドループが無効なコマンドを扱う方法。
* Command History::          コマンドヒストリーがセットアップされる方法と、どのようにアクセスされるか。
* Keyboard Macros::          キーボードマクロが実装される方法。

Defining Commands



* Using Interactive::        @code{interactive}’にたいする一般的なルール。
* Interactive Codes::        さまざまな方法で引数を読み取る標準的な文字のコード。
* Interactive Examples::     インタラクティブ引数を読み取る方法の例。
* Generic Commands::         コマンド候補からの選択。



Input Events



* Keyboard Events::          通常の文字 -- 
                               自身にシンボルされるキー。
* Function Keys::            ファンクションキー -- 
                               名前をもつがシンボルではない。
* Mouse Events::             マウスイベントの概観。
* Click Events::             マウスボタンのプッシュとリリース。
* Drag Events::              ボタンをリリースする前のマウス移動。
* Button-Down Events::       ボタンがプッシュされて、まだリリースされていない状態。
* Repeat Events::            ダブル、トリプルのクリック(またはドラッグ、ダウン)
* Motion Events::            ボタンを押さずに、マウスだけを移動する。
* Focus Events::             フレーム間のマウス移動。
* Misc Events::              システムが生成可能なその他のイベント。
* Event Examples::           マウスイベントの例。
* Classifying Events::       イベントシンボル内の修飾キーを見つける。イベント型。
* Accessing Mouse::          マウスイベントから情報抽出する関数。
* Accessing Scroll::         スクロールバーイベントから情報取得する関数。
* Strings of Events::        文字列内にキーボード文字イベントを配すための特別な配慮。

Reading Input



* Key Sequence Input::       キーシーケンスを読み取る方法。
* Reading One Event::        イベントを1つだけ読み取る方法。
* Event Mod::                Emacsが読み取られたイベントを変更する方法。
* Invoking the Input Method::  入力メソッドを使用するイベントを読み取る方法。
* Quoted Character Input::   文字の指定をユーザーに問い合わせる。
* Event Input Misc::         入力イベントの最読み取りや破棄の方法。

Keymaps



* Key Sequences::            Lispオブジェクトとしてのキーシーケンス。
* Keymap Basics::            キーマップの基本概念。
* Format of Keymaps::        キーマップはLispオブジェクトとしてどのように見えるか。
* Creating Keymaps::         キーマップを作成、コピーする関数。
* Inheritance and Keymaps::  キーマップが他のキーマップのバインディングを継承する方法。
* Prefix Keys::              キーマップの定義としてキーを定義する。
* Active Keymaps::           Emacsがアクティブなキーマップでキーバインディングを探す方法。
* Searching Keymaps::        アクティブなマップ検索のLisp処理概要。
* Controlling Active Maps::  各バッファーは標準(グローバル)のバインディングをオーバーライドするためのキーマップをもつ。マイナーモードもそれらをオーバーライドできる。
* Key Lookup::               1つのキーマップから、あるキーのバインディングを探す。
* Functions for Key Lookup::  キールックアップを要求する方法。
* Changing Key Bindings::    キーマップ内でのキーの再定義。
* Remapping Commands::       キーマップはあるコマンドを他のコマンドに変換できる。
* Translation Keymaps::      イベントシーケンスを変換するキーマップ。
* Key Binding Commands::     キーの再定義にたいするインタラクティブなインターフェイス。
* Scanning Keymaps::         ヘルプをプリントするためにすべてのキーマップを走査する。
* Menu Keymaps::             キーマップとしてキーマップを定義する。

Menu Keymaps



* Defining Menus::           メニューを定義するキーマップを作成する方法。
* Mouse Menus::              ユーザーがマウスでメニューを操作する方法。
* Keyboard Menus::           ユーザーがキーボードでメニューを操作する方法。
* Menu Example::             シンプルなメニューの作成。
* Menu Bar::                 メニューバーのカスタマイズ方法。
* Tool Bar::                 イメージ行のツールバー。
* Modifying Menus::          メニューへ新たなアイテムを追加する方法。
* Easy Menu::                メニュー作成のための便利なマクロ。

Defining Menus



* Simple Menu Items::        単純なメニューのキーバインディング。
* Extended Menu Items::      複雑なメニューアイテムの定義。
* Menu Separators::          メニューに水平ラインを描画する。
* Alias Menu Items::         メニューアイテムにコマンドエイリアスを使用する。

Major and Minor Modes



* Hooks::                    フックの使い方と、フックを提供するコードの記述方法。
* Major Modes::              メジャーモードの定義。
* Minor Modes::              マイナーモードの定義。
* Mode Line Format::         モードラインに表示されるテキストのカスタマイズ。
* Imenu::                    バッファーで作成された定義のメニューを提供する。
* Font Lock Mode::           モードが構文に応じてテキストをハイライトする方法。
* Auto-Indentation::         メジャーモードにたいするインデントをEmacsに伝える方法。
* Desktop Save Mode::        Emacsセッション間でモードがバッファー状態を保存する方法。

Hooks



* Running Hooks::            フックの実行方法。
* Setting Hooks::            関数をフックに登録、削除する方法。

Major Modes



* Major Mode Conventions::   キーマップなどにたいするコーディング規約。
* Auto Major Mode::          Emacsが自動的にメジャーモードを選択する方法。
* Mode Help::                モードの使用方法の探し方。
* Derived Modes::            他のメジャーモードにもとづき新たなメジャーモードを定義する。
* Basic Major Modes::        他のモードからよく派生元とされるモード。
* Mode Hooks::               メジャーモード関数の最後に実行されるフック。
* Tabulated List Mode::      表形式データを含むバッファーにたいする親モード。
* Generic Modes::            コメント構文とFont
* Example Major Modes::      TextモードとLispモード。

Minor Modes



* Minor Mode Conventions::   マイナーモードを記述するためのTips。
* Keymaps and Minor Modes::  マイナーモードが自身のキーマップをもつための方法。
* Defining Minor Modes::     マイナーモードを定義するための便利な機能。

Mode Line Format



* Mode Line Basics::         モードライン制御の基本概念。
* Mode Line Data::           モードラインを制御するデータ構造。
* Mode Line Top::            トップレベル変数、mode-line-format。
* Mode Line Variables::      そのデータ構造で使用される変数。
* %-Constructs::             モードラインへの情報の配置。
* Properties in Mode::       モードライン内でのテキストプロパティの使用。
* Header Lines::             モードラインに類似した最上部のライン。
* Emulating Mode Line::      モードラインのようにテキストをフォーマットする。

Font Lock Mode



* Font Lock Basics::         Font Lockカスタマイズの概要。
* Search-based Fontification::  正規表現にもとづくフォント表示。
* Customizing Keywords::     検索ベースフォント表示のカスタマイズ。
* Other Font Lock Variables::  追加のカスタマイズ機能。
* Levels of Font Lock::      多なりとも少ユーザーが選択できるように、それぞれのモードは代替レベルを定義できる。
* Precalculated Fontification::  バッファーコンテンツを生成するLispプログラムが、どのようにしてそれをフォント表示する方法も指定できるか。
* Faces for Font Lock::      Font 
                               Lockにたいする具体的な特殊フェイス。
* Syntactic Font Lock::      構文テーブルにもとづくフォント表示。
* Multiline Font Lock::      Font 
                               Lockに複数行構成の正しいハイライトを強制する方法。

Multiline Font Lock Constructs



* Font Lock Multiline::      テキストプロパティで複数行塊をマークする。
* Region to Refontify::      バッファー変更後にどのリージョンを再フォント表示するかを制御する。

Automatic Indentation of code



* SMIE::                     SMIE: Simple Minded Indentation 
                               Engine(純真なインデントエンジン)。

Simple Minded Indentation Engine



* SMIE setup::               SMIEのセットアップと機能。
* Operator Precedence Grammars::  非常にシンプルなパース技術。
* SMIE Grammar::             言語の文法を定義する。
* SMIE Lexer::               トークンの定義。
* SMIE Tricks::              パーサー制限の回避策。
* SMIE Indentation::         インデントルールの指定。
* SMIE Indentation Helpers::  インデントルールにたいするヘルパー関数。
* SMIE Indentation Example::  インデントルールの例。
* SMIE Customization::       インデントのカスタマイズ。

Documentation



* Documentation Basics::     ドキュメント文字列が定義、格納される場所。
* Accessing Documentation::  Lispプログラムがドキュメント文字列にアクセスする方法。
* Keys in Documentation::    カレントキーバインディングの置き換え。
* Describing Characters::    非プリント文字やキーシーケンスをプリント可能な記述にする。
* Help Functions::           Emacsヘルプ機能により使用されるサブルーチン。

Files



* Visiting Files::           編集のためにEmacsバッファーにファイルを読み込む。
* Saving Buffers::           変更されたバッファーをファイルに書き戻す。
* Reading from Files::       ファイルをvisitせずにバッファーに読み込む。
* Writing to Files::         バッファーの一部から新たなファイルに書き込む。
* File Locks::               複数名による同時編集を防ぐためにファイルをlockまたはunlockする。
* Information about Files::  ファイルの存在、アクセス権、サイズのテスト。
* Changing Files::           ファイル名のリネームやパーミッションの変更など。
* File Names::               ファイル名の分解と展開。
* Contents of Directories::  ディレクトリーないのファイルリストの取得。
* Create/Delete Dirs::       ディレクトリーの作成と削除。
* Magic File Names::         特定のファイル名にたいする特別な処理。
* Format Conversion::        さまざまなファイルフォーマットへ/からの変換。

Visiting Files



* Visiting Functions::       visit用の通常のインターフェイス関数。
* Subroutines of Visiting::  通常のvisit関数が使用する低レベルのサブルーチン。

Information about Files



* Testing Accessibility::    そのファイルは読み取り可能か？書き込み可能か？
* Kinds of Files::           それはディレクトリー？それともシンボリックリンク？
* Truenames::                シンボリックリンクが行き着くファイル名。
* File Attributes::          ファイルのサイズ？更新日時など。
* Extended Attributes::      アクセス制御にたいするファイル属性の拡張。
* Locating Files::           標準的な場所でファイルを見つける方法。

File Names



* File Name Components::     ファイル名のディレクトリー部分と、それ以外。
* Relative File Names::      カレントディレクトリーにたいして相対的なファイル名。
* Directory Names::          ディレクトリーとしてのディレクトリー名と、ファイルとしてのファイル名の違い。
* File Name Expansion::      相対ファイル名から絶対ファイル名への変換。
* Unique File Names::        一時ファイル用の名前の生成。
* File Name Completion::     与えられたファイル名にたいする補完を探す。
* Standard File Names::      パッケージが固定されたファイル名を使用する際に、種々のオペレーティングシステムをシンプルに処理する方法。

File Format Conversion



* Format Conversion Overview::  @code{insert-file-contents}と@code{write-region}。
* Format Conversion Round-Trip::  @code{format-alist}の使用。
* Format Conversion Piecemeal::  非ペアー変換の指定。

Backups and Auto-Saving



* Backup Files::             バックアップファイルの作成と名前選択の方法。
* Auto-Saving::              auto-saveファイルの作成と名前選択の方法。
* Reverting::                @code{revert-buffer}とその動作のカスタマイズ方法。

Backup Files



* Making Backups::           Emacsがバックアップファイルを作成する方法とタイミング。
* Rename or Copy::           2つの選択肢: 
                               古いファイルのリネームとコピー。
* Numbered Backups::         ソースファイルごとに複数のバックアップを保持する。
* Backup Names::             バックアップファイル名の計算方法とカスタマイズ。

Buffers



* Buffer Basics::            バッファーとは?
* Current Buffer::           バッファーをカレントに指定することにより、プリミティブはバッファーのコンテンツにアクセスする。
* Buffer Names::             バッファー名にたいするアクセスと変更。
* Buffer File Name::         バッファーファイル名は、どのファイルをvisitしているかを示す。
* Buffer Modification::      保存が必要なら、バッファーは“変更されている(@dfn{modified})”。
* Modification Time::        "Emacsの裏"でvisitされているファイルが変更されたかどうかを判断する。
* Read Only Buffers::        読み取り専用バッファーでのテキスト変更は許されない。
* Buffer List::              すべての既存バッファーを閲覧する方法。
* Creating Buffers::         バッファーを作成する関数。
* Killing Buffers::          明示的にkillされるまで、バッファーは存在する。
* Indirect Buffers::         インダイレクトバッファーは、他のバッファーとテキストを共有する。
* Swapping Text::            2つのバッファー間でのテキストの交換。
* Buffer Gap::               バッファー内のギャップ。

Windows



* Basic Windows::            ウィンドウ使用についての基本情報。
* Windows and Frames::       ウィンドウとそれらが表示されるフレームとの関連。
* Window Sizes::             ウィンドウのサイズへのアクセス。
* Resizing Windows::         ウィンドウのサイズの変更。
* Splitting Windows::        新たなウィンドウの作成。
* Deleting Windows::         フレームからのウィンドウの削除。
* Recombining Windows::      ウィンドウの分割や削除時のフレームレイアウトの保存。
* Selecting Windows::        選択されたウィンドウとは、編集を行っているウィンドウである。
* Cyclic Window Ordering::   既存のウィンドウ間の移動。
* Buffers and Windows::      それぞれのウィンドウは、バッファーのコンテンツを表示する。
* Switching Buffers::        バッファー切り替えのための、より高レベルな関数。
* Choosing Window::          バッファーを表示するウィンドウの選択方法。
* Display Action Functions::  @code{display-buffer}用のサブルーチン。
* Choosing Window Options::  バッファー表示方法に影響する拡張オプション。
* Window History::           それぞれのウィンドウは、表示されていたバッファーを記憶する。
* Dedicated Windows::        特定のウィンドウ内で他のバッファーの表示を無効にする。
* Quitting Windows::         以前に表示していたバッファーの状態をリストアする方法。
* Window Point::             それぞれのウィンドウは、自身の位置とポイントをもつ。
* Window Start and End::     ウィンドウ内でスクリーン表示されるテキストを表すバッファー位置。
* Textual Scrolling::        ウィンドウを通じたテキストの上下移動。
* Vertical Scrolling::       ウィンドウ上のコンテンツの上下移動。
* Horizontal Scrolling::     ウィンドウ上のコンテンツの横移動。
* Coordinates and Windows::  座標からウィンドウへの変換。
* Window Configurations::    スクリーンの情報の保存とリストア。
* Window Parameters::        ウィンドウへの追加情報の割り当て。
* Window Hooks::             スクロール、ウィンドウのサイズ変更、ある特定のしきい値を超えたときに行われる再表示、ウィンドウ設定の変更にたいするフック。

Frames



* Creating Frames::          追加のフレームの作成。
* Multiple Terminals::       異なる複数デバイス上での表示。
* Frame Parameters::         フレームのサイズ、位置、フォント等の制御。
* Terminal Parameters::      端末上のすべてのフレームにたいして一般的なパラメーター。
* Frame Titles::             フレームタイトルの自動的な更新。
* Deleting Frames::          明示的に削除されるまでフレームは存続する。
* Finding All Frames::       すべての既存フレームを調べる方法。
* Minibuffers and Frames::   フレームが使用するミニバッファーを見つける方法。
* Input Focus::              選択されたフレームの指定。
* Visibility of Frames::     フレームは可視、不可視、またはアイコン化されているかもしれない。
* Raising and Lowering::     フレームを前面に移動して他のウィンドウを隠し、背面に移動して他のウィンドウがフレームを隠す。
* Frame Configurations::     すべてのフレームの状態の保存。
* Mouse Tracking::           マウス移動時のイベントの取得。
* Mouse Position::           マウスの場所や移動を問い合わせる。
* Pop-Up Menus::             ユーザーに選択させるためのメニューの表示。
* Dialog Boxes::             yes/noを問い合わせるためのボックスの表示。
* Pointer Shape::            マウスポインターのシェイプの指定。
* Window System Selections::他のXクライアントとのテキストの転送。
* Drag and Drop::            ドラッグアンドドロップの実装の内部。
* Color Names::              カラー名定義の取得。
* Text Terminal Colors::     テキスト端末のカラーの定義。
* Resources::                サーバーからのリソース値の取得。
* Display Feature Testing::  端末の機能の判定。

Frame Parameters



* Parameter Access::         フレームのパラメーターの変更方法。
* Initial Parameters::       フレーム作成時に指定するフレームパラメーター。
* Window Frame Parameters::  ウィンドウシステムにたいするフレームパラメーターのリスト。
* Size and Position::        フレームのサイズと位置の変更。
* Geometry::                 ジオメトリー仕様の解析。

Window Frame Parameters



* Basic Parameters::         基本的なパラメーター。
* Position Parameters::      スクリーン上のフレームの位置。
* Size Parameters::          フレームのサイズ。
* Layout Parameters::        フレームのパーツのサイズと、一部パーツの有効化と無効化。
* Buffer Parameters::        表示済みまたは表示されるべきバッファーはどれか。
* Management Parameters::    ウィンドウマネージャーとの対話。
* Cursor Parameters::        カーソルの外見の制御。
* Font and Color Parameters::  フレームテキストにたいするフォントとカラー。

Positions



* Point::                    編集タスクが行われる特別な位置。
* Motion::                   ポイントの変更。
* Excursions::               一時的な移動とバッファーの変更。
* Narrowing::                バッファーの一部に編集を限定する。

Motion



* Character Motion::         文字単位での移動。
* Word Motion::              単語単位での移動。
* Buffer End Motion::        バッファー先頭または終端への移動。
* Text Lines::               テキスト行単位での移動。
* Screen Lines::             表示される行単位での移動。
* List Motion::              リストやS式の解析による移動。
* Skipping Characters::      特定の集合に属す文字のスキップ。

Markers



* Overview of Markers::      マーカー構成要素と再配置方法。
* Predicates on Markers::    オブジェクトがマーカーか否かのテスト。
* Creating Markers::         空マーカーや特定箇所のマーカーの作成。
* Information from Markers::マーカーのバッファーや文字位置を探す。
* Marker Insertion Types::   マーカーが指す位置への挿入時にマーカーを再配置する2つの方法。
* Moving Markers::           新たなバッファーや位置にマーカーを移動する。
* The Mark::                 マーカーによる"マーク"の実装方法。
* The Region::               "リージョン"へのアクセス方法。

Text



* Near Point::               ポイント付近のテキストを調べる。
* Buffer Contents::          一般的な方法によってテキストを調べる。
* Comparing Text::           バッファーの部分文字列を比較する。
* Insertion::                バッファーへの新たなテキストの追加。
* Commands for Insertion::   テキスト挿入のためのユーザーレベルコマンド。
* Deletion::                 バッファーからテキストを削除する。
* User-Level Deletion::      テキスト削除のためのユーザーレベルコマンド。
* The Kill Ring::            テキスト削除時にユーザーのためにそれを保存する場所。
* Undo::                     バッファーのテキストにたいする変更の取り消し。
* Maintaining Undo::         undo情報の有効と無効。情報をどれだけ保持するか制御する方法。
* Filling::                  明示的にフィルを行う関数。
* Margins::                  フィルコマンドにたいしてマージンを指定する方法。
* Adaptive Fill::            コンテキストからフィルプレフィクスを選択するAdaptive
* Auto Filling::             行ブレークにたいするauto-fillの実装方法。
* Sorting::                  バッファーの一部をソートする関数。
* Columns::                  水平位置の計算とその使用方法。
* Indentation::              インデントの挿入や調整のための関数。
* Case Changes::             バッファーの一部にたいするcase変換。
* Text Properties::          テキスト文字にたいするLispプロパティリストの追加。
* Substitution::             与ええられた文字の出現箇所を置換する。
* Registers::                レジスターの実装方法。レジスターに格納されたテキストや位置にアクセスする。
* Transposition::            バッファーの2つの部分を交換する。
* Decompression::            圧縮データの扱い。
* Base 64::                  Base64エンコーディングとの変換。
* Checksum/Hash::            暗号ハッシュの計算。
* Parsing HTML/XML::         HTMLおよびXMLの解析。
* Atomic Changes::           複数バッファーへの変更を"アトミック"にインストールする。
* Change Hooks::             テキスト変更時に実行する関数の指定。

The Kill Ring



* Kill Ring Concepts::       killリング内のテキストがどのように見えるか。
* Kill Functions::           テキストをkillする関数。
* Yanking::                  yankが行われる方法。
* Yank Commands::            killリングにアクセスするコマンド。
* Low-Level Kill Ring::      killリングアクセス用の関数および変数。
* Internals of Kill Ring::   killリングのデータを保持する変数。

Indentation



* Primitive Indent::         インデントのカウントと挿入に使用される関数。
* Mode-Specific Indent::     異なるモード用にインデントをカスタマイズする。
* Region Indent::            リージョン内すべての行のインデント。
* Relative Indent::          前の行にもとづきカレント行をインデントする。
* Indent Tabs::              調整可能なタイプライター形式のタブストップ。
* Motion by Indent::         最初の非ブランク文字への移動。

Text Properties



* Examining Properties::     単一の文字のプロパティを調べる。
* Changing Properties::      テキスト範囲のプロパティをセットする。
* Property Search::          プロパティが値を変更する場所の検索。
* Special Properties::       特別な意味をもつ特定のプロパティ。
* Format Properties::        テキストのフォーマットを表すプロパティ。
* Sticky Properties::        挿入されたテキストが隣接するテキストからプロパティを取得する方法。
* Lazy Properties::          テキストが調べられる際のみ、ものぐさな方法でテキストプロパティを計算する。
* Clickable Text::           テキストプロパティを使用して、テキストリージョンがクリック時に何か行うようにする。
* Fields::                   バッファー内にフィールドを定義する@code{field}プロパティ。
* Not Intervals::            テキストプロパティがLispから可視なテキスト間隔をもたない理由。

Non-@acronym{ASCII} Characters



* Text Representations::     Emacsがテキストを表す方法。
* Disabling Multibyte::      マルチバイト使用を制御する。
* Converting Representations::  ユニバイトとマルチバイトの相互変換。
* Selecting a Representation::  バイトシーケンスをユニバイトやマルチバイトとして扱う。
* Character Codes::          ユニバイトやマルチバイトが個々の文字のコードと関わる方法。
* Character Properties::     文字の挙動と処理を定義する文字属性。
* Character Sets::           利用可能な文字コード空間はさまざまな文字セットに分割される。
* Scanning Charsets::        バッファーで使用されている文字セットは?
* Translation of Characters::  変換に使用される変換テーブル。
* Coding Systems::           コーディングシステムはファイル保存のための変換である。
* Input Methods::            入力メソッドによりユーザーは特別なキーボードなしで非ASCII文字を入力できる。
* Locales::                  POSIX localeとの対話。

Coding Systems



* Coding System Basics::     基本的な概念。
* Encoding and I/O::         ファイル入出力関数がコーディングシステムを扱う方法。
* Lisp and Coding Systems::  コーディングシステム名を処理する関数。
* User-Chosen Coding Systems::  ユーザーにコーディングシステムの選択を求める。
* Default Coding Systems::   デフォルトの選択の制御。
* Specifying Coding Systems::  単一ファイル処理にたいして特定のコーディングシステムを要求する。
* Explicit Encoding::        入出力を伴わないテキストのエンコードおよびデコード。
* Terminal I/O Encoding::    端末入出力にたいするエンコーディングの使用。

Searching and Matching



* String Search::            正確なマッチの検索。
* Searching and Case::       case-independentまたはcase-significantな検索。
* Regular Expressions::      文字列クラスの記述。
* Regexp Search::            regexpにたいするマッチの検索。
* POSIX Regexps::            最長マッチにたいするPOSIXスタイルのマッチ。
* Match Data::               文字列またはregexp検索後に、テキストがマッチした部分を見つける。
* Search and Replace::       検索と置換を繰り返すコマンド。
* Standard Regexps::         センテンスやページ等を探すために有用なregexp。

Regular Expressions



* Syntax of Regexps::        正規表現の記述ルール。
* Regexp Example::           正規表現構文の説明。
* Regexp Functions::         正規表現を操作する関数。

Syntax of Regular Expressions



* Regexp Special::           正規表現内のスペシャル文字。
* Char Classes::             正規表現内で使用される文字クラス。
* Regexp Backslash::         正規表現内のバックスラッシュシーケンス。

The Match Data



* Replacing Match::          マッチされた部分文字列の置換。
* Simple Match Data::        特定の部分式開始箇所のような、マッチデータの単一アイテムへのアクセス。
* Entire Match Data::        リストとしてマッチデータ全体に一度にアクセスする。
* Saving Match Data::        マッチデータの保存とリストア。

Syntax Tables



* Syntax Basics::            構文テーブルの基本的概念。
* Syntax Descriptors::       文字がクラス分けされる方法。
* Syntax Table Functions::   構文テーブルを作成、調査、変更する方法。
* Syntax Properties::        テキストプロパティによる構文テーブルのオーバーライド。
* Motion and Syntax::        特定の構文による文字間の移動。
* Parsing Expressions::      構文テーブル使用によるバランスのとれた式の解析。
* Syntax Table Internals::   構文テーブルの情報が格納される方法。
* Categories::               文字構文をクラス分けする別の手段。

Syntax Descriptors



* Syntax Class Table::       構文クラスのテーブル。
* Syntax Flags::             各文字が所有できる追加のフラグ。

Parsing Expressions



* Motion via Parsing::       パースにより機能する移動関数。
* Position Parse::           ある位置の構文状態を判断する。
* Parser State::             Emacsが構文状態を表す方法。
* Low-Level Parsing::        指定されたリージョンを横断するパース。
* Control Parsing::          パースに影響するパラメーター。

Abbrevs and Abbrev Expansion



* Abbrev Tables::            abbrevテーブルの作成と操作。
* Defining Abbrevs::         略語の指定とそれらの展開。
* Abbrev Files::             ファイルへのabbrevの保存。
* Abbrev Expansion::         展開の制御と展開サブルーチン。
* Standard Abbrev Tables::   種々メジャーモードに使用されるabbrevテーブル。
* Abbrev Properties::        abbrevプロパティの読み取りとセットを行う方法。どのプロパティが何の効果をもつか。
* Abbrev Table Properties::  abbrevテーブルプロパティの読み取りとセットを行う方法。どのプロパティが効果をもつか。

Processes



* Subprocess Creation::      サブプロセスを開始する関数。
* Shell Arguments::          shellに渡すために引数をクォートする。
* Synchronous Processes::    同期サブプロセス使用の詳細。
* Asynchronous Processes::   非同期サブプロセスの起動。
* Deleting Processes::       非同期サブプロセスの削除。
* Process Information::      実行状態および他の属性へのアクセス。
* Input to Processes::       非同期サブプロセスへの入力の送信。
* Signals to Processes::     非同期サブプロセスの停止、継続、割り込み。
* Output from Processes::    非同期サブプロセスからの出力の収集。
* Sentinels::                プロセスの実行状態変更時に実行されるセンチネル。
* Query Before Exit::        exitによりプロセスがkillされる場合に問い合わせるかどうか。
* System Processes::         そのシステム上で実行中の別プロセスへのアクセス。
* Transaction Queues::       サブプロセスとのトランザクションベースのコミュニケション。
* Network::                  ネットワーク接続のopen。
* Network Servers::          Emacsによるネット接続のacceptを可能にするネットワークサーバー。
* Datagrams::                UDPネットワーク接続。
* Low-Level Network::        接続およびサーバーを作成するための、より低レベルだがより汎用的な関数。
* Misc Network::             ネット接続用の追加の関連関数。
* Serial Ports::             シリアルポートでのやり取り。
* Byte Packing::             bindatを使用したバイナリーデータのpackとunpack。

Receiving Output from Processes



* Process Buffers::          デフォルトでは、出力はバッファーに送信される。
* Filter Functions::         フィルター関数はプロセスからの出力を受け取る。
* Decoding Output::          フィルターはユニバイトおよびマルチバイトの文字列を取得できる。
* Accepting Output::         プロセスの出力到着まで待機する方法。

Low-Level Network Access



* Network Processes::        @code{make-network-process}’の使用。
* Network Options::          更なるネットワーク接続の制御。
* Network Feature Testing::  使用中マシン上で動作するネットワーク機能を判断する。

Packing and Unpacking Byte Arrays



* Bindat Spec::              データレイアウトの記述。
* Bindat Functions::         unpack化とpack化を行う。
* Bindat Examples::          bindat.elが行えることのサンプル。

Emacs Display



* Refresh Screen::           スクリーン上にあるすべてのもののクリアーと再描画。
* Forcing Redisplay::        再描画の強制。
* Truncation::               長いテキストの折り畳みと折り返し。
* The Echo Area::            スクリーン最下部へのメッセージ表示。
* Warnings::                 ユーザーへの警告メッセージの表示。
* Invisible Text::           バッファーのテキストの一部を隠す。
* Selective Display::        バッファーのテキストの一部を隠す(旧来の方式)。
* Temporary Displays::       自動的に消える表示。
* Overlays::                 オーバーレイを使用したバッファーの一部のハイライト。
* Size of Displayed Text::   表示されたテキストの大きさ。
* Line Height::              行の高さの制御。
* Faces::                    テキスト文字のグラフィカルスタイル(フォント、カラー等)を定義するフェイス。
* Fringes::                  ウィンドウフリンジの制御。
* Scroll Bars::              垂直スクロールバーの制御。
* Window Dividers::          ウィンドウを視覚的に区別する。
* Display Property::         特別な表示機能の有効化。
* Images::                   Emacsバッファー内でのイメージ表示。
* Buttons::                  Emacsバッファー内へのイメージ表示クリック可能ボタン追加。
* Abstract Display::         オブジェクトコレクション用のEmacsウィジェット。
* Blinking::                 Emacsがマッチする開カッコを表示する方法。
* Character Display::        Emacsがマッチする個々の文字を表示する方法。
* Beeping::                  ユーザーへの可聴シグナル。
* Window Systems::           どのウィンドウシステムが使用されているか。
* Bidirectional Display::    アラビア語やペルシア語のような、双方向スクリプトの表示。

The Echo Area



* Displaying Messages::      エコーエリア内に明示的にテキストを表示する。
* Progress::                 長時間の処理の進行状況をユーザーに知らせる。
* Logging Messages::         ユーザー用にログされるエコーエリアメッセージ。
* Echo Area Customization::  エコーエリアの制御。

Reporting Warnings



* Warning Basics::           警告の概念と、それらを報告するための関数。
* Warning Variables::        プログラムが警告をカスタマイズするためにバインドする変数。
* Warning Options::          ユーザーが警告の表示を制御するためにセットする変数。
* Delayed Warnings::         コマンド終了まで警告を延期する。

Overlays



* Managing Overlays::        オーバーレイの作成と変更。
* Overlay Properties::       プロパティ読み取りおよびセットの方法。どのプロパティがスクリーン表示に何を行うか。
* Finding Overlays::         オーバーレイにたいする検索。

Faces



* Face Attributes::          フェイスとは?
* Defining Faces::           フェイスを定義する方法。
* Attribute Functions::      フェイス属性の確認およびセットを行う関数。
* Displaying Faces::         ある文字にたいして指定されたフェイスをEmacsが組み合わせる方法。
* Face Remapping::           フェイスを別の定義にリマップする。
* Face Functions::           フェイスの定義、および確認する方法。
* Auto Faces::               自動的にフェイスを割り当てるフック。
* Basic Faces::              デフォルトで定義されるフェイス。
* Font Selection::           あるフェイスに最適なフォントを見つける。
* Font Lookup::              利用可能なフォント名とそれらの情報の照会。
* Fontsets::                 フォントセット、それは文字セットの範囲を処理するフォントコレクションである。
* Low-Level Font::           文字表示フォントのLisp表現。

Fringes



* Fringe Size/Pos::          ウィンドウフリンジを置く場所を指定する。
* Fringe Indicators::        ウィンドウフリンジ内にインジケーターアイコンを表示する。
* Fringe Cursors::           右フリンジ内にカーソルを表示する。
* Fringe Bitmaps::           フリンジインジケーターにたいしてビットマップを指定する。
* Customizing Bitmaps::      フリンジ内で使用する独自ビットマップの指定。
* Overlay Arrow::            位置を示す矢印の表示。

The @code{display} Property



* Replacing Specs::          テキストを置換するディスプレイspec。
* Specified Space::          指定された幅に1つのスペースを表示する。
* Pixel Specification::      ピクセル単位でスペースの幅または高さを指定する。
* Other Display Specs::      イメージの表示。高さ、スペーシング、その他のテキストプロパティの調整。
* Display Margins::          メインテキスト側面へのテキストまたはイメージの表示。

Images



* Image Formats::            サポートされるイメージフォーマット。
* Image Descriptors::        @code{:display}内で使用されるイメージの指定方法。
* XBM Images::               XBMフォーマット用の特別な機能。
* XPM Images::               XPMフォーマット用の特別な機能。
* PostScript Images::        PostScriptフォーマット用の特別な機能。
* ImageMagick Images::       ImageMagickを通じて利用できる特別な機能。
* Other Image Types::        サポートされるその他さまざまなフォーマット。
* Defining Images::          後で使用するためにイメージを定義する便利な方法。
* Showing Images::           一度定義されたイメージを表示するための便利な方法。
* Multi-Frame Images::       1つ以上のフレームを含むイメージ。
* Image Cache::              イメージ表示の内部的メカニズム。

Buttons



* Button Properties::        特別な意味をもつボタンプロパティ。
* Button Types::             ボタンのクラスにたいして一般的なプロパティを定義する。
* Making Buttons::           Emacsバッファーへのボタンの追加。
* Manipulating Buttons::     ボタンプロパティの取得とセット。
* Button Buffer Commands::   ボタンにたいするバッファー規模のコマンドとバインディング。

Abstract Display



* Abstract Display Functions::  Ewocパッケージ内の関数。
* Abstract Display Example::  Ewocの使用例。

Character Display



* Usual Display::            文字の表示にたいする通常の慣習。
* Display Tables::           ディスプレイテーブルの構成要素。
* Active Display Table::     使用するディスプレイテーブルをEmacsが選択する方法。
* Glyphs::                   グリフの定義方法とグリフの意味。
* Glyphless Chars::          グリフなしの文字の描画方法。

Operating System Interface



* Starting Up::              Customizing Emacs startup processing.
* Getting Out::              (永久または一時的に)exitが機能する方法。
* System Environment::       システム名と種類の区別。
* User Identification::      そのユーザーの名前とユーザーIDを調べる。
* Time of Day::              カレント時刻の取得。
* Time Conversion::          時刻の数値形式からカレンダーデータへの変換と逆変換。
* Time Parsing::             時刻の数値形式からテキストへの変換と逆変換。
* Processor Run Time::       Emacsによる実行時間の取得。
* Time Calculations::        時間の加減算、その他。
* Timers::                   特定時刻に関数を呼び出すためにターマーをセットする。
* Idle Timers::              Emacsが特定の時間の間アイドル時に関数を呼び出すためにタイマーをセットする。
* Terminal Input::           端末入力へのアクセスと記録。
* Terminal Output::          端末出力の制御と記録。
* Sound Output::             コンピューターのスピーカーでのサウンド再生。
* X11 Keysyms::              Xウィンドウにたいするキーシンボルの操作。
* Batch Mode::               端末との対話なしでEmacsを実行する。
* Session Management::       Xセッション管理の保存とリストア。
* Desktop Notifications::    デスクトップ通知。
* File Notifications::       ファイル通知。
* Dynamic Libraries::        サポートライブラリーのオンデマンドロード。

Emacsのスタートアップ



* Startup Summary::          スタートアップ時にEmacsが行うアクションの順序。
* Init File::                initファイル読み込みの詳細。
* Terminal-Specific::        端末固有のLispファイルの読み込み方法。
* Command-Line Arguments::   コマンドライン引数の処理とカスタマイズの方法。

Getting Out of Emacs



* Killing Emacs::            Emacsからの不可逆的なexit。
* Suspending Emacs::         Emacsからの可逆的なexit。

Terminal Input



* Input Modes::              入力の処理方法にたいするオプション。
* Recording Input::          直近またはすべての入力イベントのヒストリーの保存。

Preparing Lisp code for distribution



* Packaging Basics::         Emacs Lispパッケージの基本的概念。
* Simple Packages::          単一.elファイルをパッケージする方法。
* Multi-file Packages::      複数ファイルをパッケージする方法。
* Package Archives::         パッケージアーカイブの保守。

Tips and Conventions



* Coding Conventions::       明快で堅牢なプログラムにたいする慣習。
* Key Binding Conventions::  どのキーをどのプログラムにバインドすべきか。
* Programming Tips::         Emacsコードを円滑にEmacsに適合させる。
* Compilation Tips::         コンパイル済みコードの実行を高速にする。
* Warning Tips::             コンパイラー警告をオフにする。
* Documentation Tips::       読みやすいドキュメント文字列の記述。
* Comment Tips::             コメント記述の慣習。
* Library Headers::          ライブラリーパッケージにたいする標準的なヘッダー。

GNU Emacs Internals



* Building Emacs::           ダンプ済みEmacsの作成方法。
* Pure Storage::             その場かぎりの事前ロードされたLisp関数を共有する。
* Garbage Collection::       Lispオブジェクトの使用されないスペースの回収。
* Memory Usage::             これまでに作成されたLispオブジェクトの総サイズの情報。
* Writing Emacs Primitives::  Emacs用にCコードを記述する。
* Object Internals::         バッファー、ウィンドウ、プロセスのデーラフォーマット。

Object Internals



* Buffer Internals::         バッファー構造体の構成子。
* Window Internals::         ウィンドウ構造体の構成子。
* Process Internals::        プロセス構造体の構成子。
@end detailmenu
@end menu

@ifclear VOL2
@include intro-ja.texi
@include objects-ja.texi
@include numbers-ja.texi
@include strings-ja.texi

@include lists-ja.texi
@include sequences-ja.texi
@include hash-ja.texi
@include symbols-ja.texi
@include eval-ja.texi

@include control-ja.texi
@include variables-ja.texi
@include functions-ja.texi
@include macros-ja.texi

@include customize-ja.texi
@include loading-ja.texi
@include compile-ja.texi

@c This includes edebug.texi.
@include debugging-ja.texi
@include streams-ja.texi
@include minibuf-ja.texi
@include commands-ja.texi

@include keymaps-ja.texi
@include modes-ja.texi
@include help-ja.texi
@include files-ja.texi

@include backups-ja.texi

@end ifclear

@c ================ Beginning of Volume 2 ================
@ifclear VOL1

@include buffers-ja.texi
@include windows-ja.texi
@include frames-ja.texi

@include positions-ja.texi
@include markers-ja.texi
@include text-ja.texi
@include nonascii-ja.texi

@include searching-ja.texi
@include syntax-ja.texi
@include abbrevs-ja.texi
@include processes-ja.texi

@include display-ja.texi
@include os-ja.texi

@include package-ja.texi

@c appendices

@include anti-ja.texi
@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include doclicense.texi
@node GPL
@appendix GNU General Public License
@include gpl.texi
@include tips-ja.texi
@include internals-ja.texi
@include errors-ja.texi
@include maps-ja.texi
@include hooks-ja.texi

@include index.texi

@end ifclear

@ignore
@node New Symbols
@unnumbered New Symbols Since the Previous Edition

@printindex tp
@end ignore

@bye


These words prevent "local variables" above from confusing Emacs.
